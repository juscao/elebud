// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Folder {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  name      String    @db.VarChar(50)
  Projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  folder      Folder?  @relation(fields: [folderId], references: [id])
  folderId    String?
  type        Type
  title       String   @db.VarChar(50)
  description String?  @db.VarChar(500)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Chart       Chart[]
}

model User {
  id       String    @id @default(uuid())
  username String    @unique @db.VarChar(20)
  password String
  Folders  Folder[]
  Projects Project[]
}

model Chart {
  id              String       @id @default(uuid())
  project         Project      @relation(fields: [projectId], references: [id])
  projectId       String
  backgroundColor String       @default("#FFFFFF")
  fontColor       String       @default("#000000")
  fontSize        Int          @default(16)
  displayMode     String       @default("No labels")
  sankeyLinkColor String       @default("#E1E5EA")
  sankeyNodes     sankeyNode[]
}

model sankeyNode {
  id               String @id @default(uuid())
  chart            Chart  @relation(fields: [chartId], references: [id])
  chartId          String
  originColor      String
  destinationColor String
  origin           String @db.VarChar(20)
  destination      String @db.VarChar(20)
  amount           Int
}

enum Type {
  SANKEY
  PIE
}
